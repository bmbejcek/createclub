import React from 'react';

/*! *****************************************************************************
Copyright (c) Microsoft Corporation.

Permission to use, copy, modify, and/or distribute this software for any
purpose with or without fee is hereby granted.

THE SOFTWARE IS PROVIDED "AS IS" AND THE AUTHOR DISCLAIMS ALL WARRANTIES WITH
REGARD TO THIS SOFTWARE INCLUDING ALL IMPLIED WARRANTIES OF MERCHANTABILITY
AND FITNESS. IN NO EVENT SHALL THE AUTHOR BE LIABLE FOR ANY SPECIAL, DIRECT,
INDIRECT, OR CONSEQUENTIAL DAMAGES OR ANY DAMAGES WHATSOEVER RESULTING FROM
LOSS OF USE, DATA OR PROFITS, WHETHER IN AN ACTION OF CONTRACT, NEGLIGENCE OR
OTHER TORTIOUS ACTION, ARISING OUT OF OR IN CONNECTION WITH THE USE OR
PERFORMANCE OF THIS SOFTWARE.
***************************************************************************** */

var __assign = function() {
    __assign = Object.assign || function __assign(t) {
        for (var s, i = 1, n = arguments.length; i < n; i++) {
            s = arguments[i];
            for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p)) t[p] = s[p];
        }
        return t;
    };
    return __assign.apply(this, arguments);
};

function __generator(thisArg, body) {
    var _ = { label: 0, sent: function() { if (t[0] & 1) throw t[1]; return t[1]; }, trys: [], ops: [] }, f, y, t, g;
    return g = { next: verb(0), "throw": verb(1), "return": verb(2) }, typeof Symbol === "function" && (g[Symbol.iterator] = function() { return this; }), g;
    function verb(n) { return function (v) { return step([n, v]); }; }
    function step(op) {
        if (f) throw new TypeError("Generator is already executing.");
        while (_) try {
            if (f = 1, y && (t = op[0] & 2 ? y["return"] : op[0] ? y["throw"] || ((t = y["return"]) && t.call(y), 0) : y.next) && !(t = t.call(y, op[1])).done) return t;
            if (y = 0, t) op = [op[0] & 2, t.value];
            switch (op[0]) {
                case 0: case 1: t = op; break;
                case 4: _.label++; return { value: op[1], done: false };
                case 5: _.label++; y = op[1]; op = [0]; continue;
                case 7: op = _.ops.pop(); _.trys.pop(); continue;
                default:
                    if (!(t = _.trys, t = t.length > 0 && t[t.length - 1]) && (op[0] === 6 || op[0] === 2)) { _ = 0; continue; }
                    if (op[0] === 3 && (!t || (op[1] > t[0] && op[1] < t[3]))) { _.label = op[1]; break; }
                    if (op[0] === 6 && _.label < t[1]) { _.label = t[1]; t = op; break; }
                    if (t && _.label < t[2]) { _.label = t[2]; _.ops.push(op); break; }
                    if (t[2]) _.ops.pop();
                    _.trys.pop(); continue;
            }
            op = body.call(thisArg, _);
        } catch (e) { op = [6, e]; y = 0; } finally { f = t = 0; }
        if (op[0] & 5) throw op[1]; return { value: op[0] ? op[1] : void 0, done: true };
    }
}

function __spreadArrays() {
    for (var s = 0, i = 0, il = arguments.length; i < il; i++) s += arguments[i].length;
    for (var r = Array(s), k = 0, i = 0; i < il; i++)
        for (var a = arguments[i], j = 0, jl = a.length; j < jl; j++, k++)
            r[k] = a[j];
    return r;
}

var defaultOptions = {
    chars: "-./^*!}<~$012345abcdef",
    interval: 50,
};
var getRandomChar = function (chars) {
    return chars[Math.floor(Math.random() * chars.length)];
};
var getChar = function (i, j, maxLength, oldValue, newValue, chars) {
    if (j > i) {
        return oldValue[j];
    }
    if (i >= maxLength && j < i - maxLength) {
        return newValue[j];
    }
    return getRandomChar(chars);
};
var dencrypt = function (options) {
    var _a = __assign(__assign({}, defaultOptions), options), chars = _a.chars, interval = _a.interval, callback = _a.callback, initialValue = _a.initialValue;
    var lastValue;
    var isCrypting;
    if (initialValue) {
        lastValue = initialValue;
        callback(lastValue);
    }
    function calculateValues(nextValue, prevValue) {
        var nextLength, prevLength, maxLength, iterations, i;
        if (prevValue === void 0) { prevValue = ""; }
        return __generator(this, function (_a) {
            switch (_a.label) {
                case 0:
                    nextLength = nextValue.length;
                    prevLength = prevValue.length;
                    maxLength = Math.max(nextLength, prevLength);
                    iterations = 2 * maxLength;
                    i = 0;
                    return [4 /*yield*/, prevValue];
                case 1:
                    _a.sent();
                    _a.label = 2;
                case 2:
                    if (!(i < iterations)) return [3 /*break*/, 4];
                    return [4 /*yield*/, __spreadArrays(new Array(maxLength)).map(function (_, j) { return getChar(i, j, maxLength, prevValue, nextValue, chars); })
                            .join("")];
                case 3:
                    _a.sent();
                    i++;
                    return [3 /*break*/, 2];
                case 4: return [4 /*yield*/, nextValue];
                case 5:
                    _a.sent();
                    return [2 /*return*/];
            }
        });
    }
    var setValue = function (value) {
        clearInterval(isCrypting);
        var values = calculateValues(value, lastValue);
        return new Promise(function (resolve) {
            isCrypting = setInterval(function () {
                var next = values.next();
                if (next.done) {
                    clearInterval(isCrypting);
                    resolve(lastValue);
                }
                else {
                    lastValue = next.value;
                    callback(lastValue);
                }
            }, interval);
        });
    };
    return setValue;
};

function useDencrypt(v, o) {
    var initialValue = "";
    var options = {};
    if (typeof v === "object") {
        options = v;
    }
    else if (typeof v === "string") {
        initialValue = v;
        options = o !== null && o !== void 0 ? o : {};
    }
    var _a = React.useState(), result = _a[0], setResult = _a[1];
    var _b = React.useState(), setValue = _b[0], setSetValue = _b[1];
    React.useEffect(function () {
        var setValue = dencrypt(__assign(__assign({}, options), { initialValue: initialValue, callback: setResult }));
        setSetValue(function () { return setValue; });
    }, []);
    return [result, setValue];
}

export { dencrypt, useDencrypt };
//# sourceMappingURL=index.es.js.map
